{"version":3,"sources":["components/Loader/Loader.js","components/Loading/Loading.js","components/AsyncComponent/AsyncComponent.js","components/Loader/Loader.module.css","components/Loading/Loading.module.css","serviceWorker.js","index.js"],"names":["Loader","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","styles","pageLoader","cx","cy","r","Component","Loading","loading","_components_Loader_Loader__WEBPACK_IMPORTED_MODULE_6__","asyncComponent","importComponent","loadingComponent","arguments","length","undefined","_Component","AsyncComponent","props","_this","Object","D_Apps_projectmegaindia_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__","this","D_Apps_projectmegaindia_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__","D_Apps_projectmegaindia_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__","call","state","component","D_Apps_projectmegaindia_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_6__","D_Apps_projectmegaindia_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__","key","value","_componentDidMount","D_Apps_projectmegaindia_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","D_Apps_projectmegaindia_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","mark","_callee","_ref","wrap","_context","prev","next","sent","default","setState","stop","apply","C","react__WEBPACK_IMPORTED_MODULE_7___default","module","exports","loader","Boolean","window","location","hostname","match","App","Promise","all","__webpack_require__","e","then","bind","ReactDOM","render","react_default","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sKAGMA,mLAEE,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOC,YACnBL,EAAAC,EAAAC,cAAA,UAAQI,GAAG,KAAKC,GAAG,KAAKC,EAAE,OAC1BR,EAAAC,EAAAC,cAAA,UAAQI,GAAG,KAAKC,GAAG,KAAKC,EAAE,OAC1BR,EAAAC,EAAAC,cAAA,UAAQI,GAAG,KAAKC,GAAG,KAAKC,EAAE,OAC1BR,EAAAC,EAAAC,cAAA,UAAQI,GAAG,KAAKC,GAAG,KAAKC,EAAE,eAPrBC,aAaNV,mHCZTW,mLAEE,OAAQV,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOO,SAC3BX,EAAAC,EAAAC,cAACU,EAAA,EAAD,cAHUH,aAQPC,oJCRA,SAASG,EAAeC,GAA0C,IAAzBC,EAAyBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAN,KAyBzE,OAzB+E,SAAAG,GAE7E,SAAAC,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXC,UAAWf,GAJIO,EAF0D,OAAAC,OAAAQ,EAAA,EAAAR,CAAAH,EAAAD,GAAAI,OAAAS,EAAA,EAAAT,CAAAH,EAAA,EAAAa,IAAA,oBAAAC,MAAA,eAAAC,EAAAZ,OAAAa,EAAA,EAAAb,CAAAc,EAAApC,EAAAqC,KAAA,SAAAC,IAAA,IAAAC,EAAAV,EAAA,OAAAO,EAAApC,EAAAwC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAWtC9B,IAXsC,OAAA0B,EAAAE,EAAAG,KAW1Df,EAX0DU,EAWnEM,QAERrB,KAAKsB,SAAS,CACZjB,UAAWA,IAd8D,wBAAAY,EAAAM,SAAAT,EAAAd,SAAA,yBAAAU,EAAAc,MAAAxB,KAAAT,YAAA,KAAAiB,IAAA,SAAAC,MAAA,WAmB3E,IAAMgB,EAAIzB,KAAKI,MAAMC,UAErB,OAAOoB,EAAIC,EAAAlD,EAAAC,cAACgD,EAAMzB,KAAKJ,OAAY,SArBwCD,EAAA,CAClDX,gCCJ/B2C,EAAAC,QAAA,CAAkBhD,WAAA,2BAAAiD,OAAA,yCCAlBF,EAAAC,QAAA,CAAkB1C,QAAA,8JCWE4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,8ECZAC,SAAM/C,YAAe,kBAAMgD,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,YAAgCxD,MAEjEyD,IAASC,OAAOC,EAAApE,EAAAC,cAAC0D,EAAD,MAASU,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMT,KAAK,SAAAU,GACjCA,EAAaC","file":"static/js/main.bf4f9938.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport styles from './Loader.module.css';\r\n\r\nclass Loader extends Component {\r\n    render() {\r\n        return (\r\n            <svg className={styles.pageLoader}>\r\n                <circle cx=\"75\" cy=\"75\" r=\"20\"></circle>\r\n                <circle cx=\"75\" cy=\"75\" r=\"35\"></circle>\r\n                <circle cx=\"75\" cy=\"75\" r=\"50\"></circle>\r\n                <circle cx=\"75\" cy=\"75\" r=\"65\"></circle>\r\n            </svg>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Loader;\r\n","import React, { Component } from 'react';\r\nimport Loader from '../../components/Loader/Loader';\r\nimport styles from './Loading.module.css';\r\n\r\nclass Loading extends Component {\r\n    render() {\r\n        return (<div className={styles.loading}>\r\n            <Loader />\r\n        </div>);\r\n    }\r\n}\r\n\r\nexport default Loading;\r\n","// https://serverless-stack.com/chapters/code-splitting-in-create-react-app.html\r\n\r\nimport React, { Component } from \"react\";\r\n\r\nexport default function asyncComponent(importComponent, loadingComponent = null) {\r\n  class AsyncComponent extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n\r\n      this.state = {\r\n        component: loadingComponent\r\n      };\r\n    }\r\n\r\n    async componentDidMount() {\r\n      const { default: component } = await importComponent();\r\n\r\n      this.setState({\r\n        component: component\r\n      });\r\n    }\r\n\r\n    render() {\r\n      const C = this.state.component;\r\n\r\n      return C ? <C {...this.props} /> : null;\r\n    }\r\n  }\r\n\r\n  return AsyncComponent;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageLoader\":\"Loader_pageLoader__XJNaJ\",\"loader\":\"Loader_loader__1vRzX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loading\":\"Loading_loading__3rCZu\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport asyncComponent from './components/AsyncComponent/AsyncComponent';\nimport Loading from './components/Loading/Loading';\nimport './index.css';\nconst App = asyncComponent(() => import('./components/App/App'), Loading);\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}