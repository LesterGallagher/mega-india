{"version":3,"sources":["config.js","components/NavbarMenuIcon/NavbarMenuIcon.module.css","components/NavbarMenuIcon/NavbarMenuIcon.js","components/ToolbarNormal/ToolbarNormal.js","components/RoutesOffersOverview/RoutesOffersOverview.module.css","components/RoutesList/RoutesList.module.css","lib/geo.js","components/RoutesList/RoutesList.js","components/RoutesOffersOverview/RoutesOffersOverview.js"],"names":["__webpack_exports__","googleMapsAPIKey","module","exports","svg","middleBar","NavbarMenuIcon","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","react_default","a","createElement","className","styles","viewBox","d","Component","ToolbarNormal","handleMenuClick","window","toggleOnsMenu","render","react_onsenui","onClick","components_NavbarMenuIcon_NavbarMenuIcon","name","RoutesOffersOverview","title","fromTo","description","senderName","summary","timestamp","listItem","center","image","right","degreesToRadians","degrees","Math","PI","distance","location1","location2","latDelta","latitude","lonDelta","longitude","sin","cos","atan2","sqrt","boundingBoxCoordinates","radius","latDegrees","latitudeNorth","min","latitudeSouth","max","longDegsNorth","metersToLongitudeDegrees","longDegsSouth","longDegs","swCorner","wrapLongitude","neCorner","radians","deltaDeg","adjusted","RoutesList","handleClick","routeOrder","e","history","push","id","renderItem","key","url","concat","encodeURIComponent","overview_polyline","config","replace","tappable","src","alt","start_address","end_address","format","navigator","language","routesList","map","withRouter","getRouteOrdersInArea","_ref","asyncToGenerator","regenerator_default","mark","_callee","area","box","lesserGeopoint","greaterGeopoint","query","snapshot","allLocs","wrap","_context","prev","next","utils","firebase","firestore","GeoPoint","collection","where","orderBy","get","sent","forEach","loc","data","distanceFromCenter","location","abrupt","t0","console","error","Error","stop","_x","apply","arguments","componentWillMount","_callee2","_context2","getRouteOrders","setState","_callee3","_context3","log","renderToolbar","style","margin","padding","components_RoutesList_RoutesList"],"mappings":"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","file":"static/js/11.d20bfccd.chunk.js","sourcesContent":["export default {\r\n    googleMapsAPIKey: 'AIzaSyCRPLyg-5qth7AakbK6dYymVwHzja2HZI0'\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"svg\":\"NavbarMenuIcon_svg__lO4v7\",\"middleBar\":\"NavbarMenuIcon_middleBar__7DEMy\"};","import React, {Component} from 'react';\r\nimport styles from './NavbarMenuIcon.module.css'\r\n\r\nclass NavbarMenuIcon extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {  }\r\n    }\r\n    render() { \r\n        return (\r\n            <svg className={styles.svg} viewBox=\"0 0 512 512\">\r\n                <path className={styles.middleBar} d=\"M491.318,235.318H20.682C9.26,235.318,0,244.577,0,256s9.26,20.682,20.682,20.682h470.636\r\n                    c11.423,0,20.682-9.259,20.682-20.682C512,244.578,502.741,235.318,491.318,235.318z\"/>\r\n                <path d=\"M491.318,78.439H20.682C9.26,78.439,0,87.699,0,99.121c0,11.422,9.26,20.682,20.682,20.682h470.636\r\n                    c11.423,0,20.682-9.26,20.682-20.682C512,87.699,502.741,78.439,491.318,78.439z\"/>\r\n                <path d=\"M491.318,392.197H20.682C9.26,392.197,0,401.456,0,412.879s9.26,20.682,20.682,20.682h470.636\r\n                    c11.423,0,20.682-9.259,20.682-20.682S502.741,392.197,491.318,392.197z\"/>\r\n            </svg>\r\n        );\r\n    }\r\n}\r\n \r\nexport default NavbarMenuIcon;","import React, {Component} from 'react';\r\nimport { Page, Toolbar, Button, ToolbarButton, Icon } from 'react-onsenui';\r\nimport NavbarMenuIcon from '../NavbarMenuIcon/NavbarMenuIcon';\r\n\r\nclass ToolbarNormal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {}\r\n    }\r\n\r\n    handleMenuClick = () => {\r\n        window.toggleOnsMenu();\r\n    }\r\n\r\n    render = () => {\r\n        \r\n        return (<Toolbar>\r\n            <div className=\"left\">\r\n                <ToolbarButton onClick={this.handleMenuClick} className=\"menu-toolbar-btn\">\r\n                    <NavbarMenuIcon />\r\n                </ToolbarButton>\r\n            </div>\r\n            <div className=\"center\">{this.props.name}</div>\r\n        </Toolbar>);\r\n    }\r\n}\r\n\r\nexport default ToolbarNormal;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RoutesOffersOverview\":\"RoutesOffersOverview_RoutesOffersOverview__CV76E\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"RoutesList_title__1CauU\",\"fromTo\":\"RoutesList_fromTo__MPGGU\",\"description\":\"RoutesList_description__8BoLd\",\"senderName\":\"RoutesList_senderName__3eF5K\",\"summary\":\"RoutesList_summary__2iNQT\",\"timestamp\":\"RoutesList_timestamp__xZmmX\",\"listItem\":\"RoutesList_listItem__1QpPj\",\"center\":\"RoutesList_center__2rIiJ\",\"image\":\"RoutesList_image__HOuHK\",\"right\":\"RoutesList_right__AjchT\"};","const R = 6378.137; // Radius of earth in KM\r\n\r\nexport const degreesToRadians = (degrees) => {return (degrees * Math.PI)/180;}\r\n\r\nexport const latLngDist = (lat1, lon1, lat2, lon2) => {\r\n    var dLat = (lat2 * Math.PI) / 180 - (lat1 * Math.PI) / 180;\r\n    var dLon = (lon2 * Math.PI) / 180 - (lon1 * Math.PI) / 180;\r\n    var a =\r\n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n        Math.cos((lat1 * Math.PI) / 180) *\r\n        Math.cos((lat2 * Math.PI) / 180) *\r\n        Math.sin(dLon / 2) *\r\n        Math.sin(dLon / 2);\r\n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    var d = R * c;\r\n    return d * 1000; // meters\r\n};\r\n\r\nexport const meterPerLatLng = (lat, lng) => {\r\n    lat *= 0.0174532925;\r\n    lng *= 0.0174532925;\r\n    return [\r\n        111132.954 - 559.822 * Math.cos(2 * lng) + 1.175 * Math.cos(4 * lng),\r\n        111132.954 * Math.cos(lat)\r\n    ];\r\n};\r\n\r\nexport const bearing = (lat1, lng1, lat2, lng2) => {\r\n    var dLon = lng2 - lng1;\r\n    var y = Math.sin(dLon) * Math.cos(lat2);\r\n    var x =\r\n        Math.cos(lat1) * Math.sin(lat2) -\r\n        Math.sin(lat1) * Math.cos(lat2) * Math.cos(dLon);\r\n    var brng = toDeg(Math.atan2(y, x));\r\n    return 360 - ((brng + 360) % 360);\r\n};\r\n\r\nexport const toDeg = rad => (rad * 180) / Math.PI;\r\nexport const toRad = deg => (deg * Math.PI) / 180;\r\n\r\nexport const distance = (location1, location2) => {\r\n    const radius = 6371; // Earth's radius in kilometers\r\n    const latDelta = degreesToRadians(location2.latitude - location1.latitude);\r\n    const lonDelta = degreesToRadians(location2.longitude - location1.longitude);\r\n  \r\n    const a = (Math.sin(latDelta / 2) * Math.sin(latDelta / 2)) +\r\n            (Math.cos(degreesToRadians(location1.latitude)) * Math.cos(degreesToRadians(location2.latitude)) *\r\n            Math.sin(lonDelta / 2) * Math.sin(lonDelta / 2));\r\n  \r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n  \r\n    return radius * c;\r\n  }\r\n\r\nexport const boundingBoxCoordinates = (center, radius) => {\r\n    const KM_PER_DEGREE_LATITUDE = 110.574;\r\n    const latDegrees = radius / KM_PER_DEGREE_LATITUDE;\r\n    const latitudeNorth = Math.min(90, center.latitude + latDegrees);\r\n    const latitudeSouth = Math.max(-90, center.latitude - latDegrees);\r\n    // calculate longitude based on current latitude\r\n    const longDegsNorth = metersToLongitudeDegrees(radius, latitudeNorth);\r\n    const longDegsSouth = metersToLongitudeDegrees(radius, latitudeSouth);\r\n    const longDegs = Math.max(longDegsNorth, longDegsSouth);\r\n    return {\r\n        swCorner: { // bottom-left (SW corner)\r\n            latitude: latitudeSouth,\r\n            longitude: wrapLongitude(center.longitude - longDegs),\r\n        },\r\n        neCorner: { // top-right (NE corner)\r\n            latitude: latitudeNorth,\r\n            longitude: wrapLongitude(center.longitude + longDegs),\r\n        },\r\n    };\r\n}\r\nconst metersToLongitudeDegrees = (distance, latitude) => {\r\n    const EARTH_EQ_RADIUS = 6378137.0;\r\n    // this is a super, fancy magic number that the GeoFire lib can explain (maybe)\r\n    const E2 = 0.00669447819799;\r\n    const EPSILON = 1e-12;\r\n    const radians = degreesToRadians(latitude);\r\n    const num = Math.cos(radians) * EARTH_EQ_RADIUS * Math.PI / 180;\r\n    const denom = 1 / Math.sqrt(1 - E2 * Math.sin(radians) * Math.sin(radians));\r\n    const deltaDeg = num * denom;\r\n    if (deltaDeg < EPSILON) {\r\n        return distance > 0 ? 360 : 0;\r\n    }\r\n    // else\r\n    return Math.min(360, distance / deltaDeg);\r\n}\r\n\r\n/**\r\n * Wraps the longitude to [-180,180].\r\n *\r\n * @param {number} longitude The longitude to wrap.\r\n * @return {number} longitude The resulting longitude.\r\n */\r\nexport const wrapLongitude = (longitude) => {\r\n    if (longitude <= 180 && longitude >= -180) {\r\n        return longitude;\r\n    }\r\n    const adjusted = longitude + 180;\r\n    if (adjusted > 0) {\r\n        return (adjusted % 360) - 180;\r\n    }\r\n    // else\r\n    return 180 - (-adjusted % 360);\r\n}\r\n\r\n","import React, { Component } from 'react';\nimport styles from './RoutesList.module.css';\nimport { firebaseReady } from '../../lib/authentication';\nimport firebase from 'firebase/app';\nimport * as utils from '../../lib/geo';\nimport { ListItem, List, ListHeader, ListTitle, Icon, Fab } from 'react-onsenui';\nimport config from '../../config';\nimport { format } from 'timeago.js';\nimport { withRouter } from 'react-router-dom';\n\nclass RoutesList extends Component {\n    constructor(props) {\n        super();\n        this.state = {\n\n        };\n    }\n\n    handleClick = routeOrder => e => {\n        this.props.history.push('/route/' + routeOrder.id);\n    }\n\n    renderItem = (routeOrder, key) => {\n        const url = `https://maps.googleapis.com/maps/api/staticmap?size=200x130\n            &path=enc%3A${encodeURIComponent(routeOrder.overview_polyline)}\n            &key=${config.googleMapsAPIKey}`.replace(/\\s/g, '');\n        return (\n            <ListItem tappable key={key} className={styles.listItem} onClick={this.handleClick(routeOrder)}>\n                <div className=\"left\">\n                    <img className={styles.image} src={url} alt=\"Route thumbnail\" />\n                </div>\n                <div className={'center ' + styles.center}>\n                    <div>\n                        <h3 className={styles.title}>{routeOrder.title}</h3>\n                        <p className={styles.fromTo}>Van {routeOrder.start_address} naar {routeOrder.end_address}</p>\n                        <p className={styles.summary}>{routeOrder.summary}</p>\n                        <p className={styles.description}>{routeOrder.description}</p>\n                        <p className={styles.senderName}>{routeOrder.senderName}</p>\n                        <p className={styles.timestamp}>{format(routeOrder.timestamp, navigator.language || 'nl')}</p>\n                    </div>\n                </div>\n            </ListItem>\n        )\n    }\n\n    render() {\n        return (\n            <div className=\"RoutesList\">\n                {(this.props.routesList || []).map(this.renderItem)}\n            </div>\n        );\n    }\n}\n\nexport default withRouter(RoutesList);\n","import React, { Component } from 'react';\nimport styles from './RoutesOffersOverview.module.css';\nimport { firebaseReady } from '../../lib/authentication';\nimport firebase from 'firebase/app';\nimport * as utils from '../../lib/geo';\nimport { ListItem, List, ListHeader, Page, Toolbar, Card } from 'react-onsenui';\nimport ToolbarNormal from '../ToolbarNormal/ToolbarNormal';\nimport RoutesList from '../RoutesList/RoutesList';\n\nclass RoutesOffersOverview extends Component {\n    constructor(props) {\n        super();\n        this.state = {\n        };\n\n    }\n\n    /**\n    * Get locations within a bounding box defined by a center point and distance from from the center point to the side of the box;\n    *\n    * @param {Object} area an object that represents the bounding box\n    *    around a point in which locations should be retrieved\n    * @param {Object} area.center an object containing the latitude and\n    *    longitude of the center point of the bounding box\n    * @param {number} area.center.latitude the latitude of the center point\n    * @param {number} area.center.longitude the longitude of the center point\n    * @param {number} area.radius (in kilometers) the radius of a circle\n    *    that is inscribed in the bounding box;\n    *    This could also be described as half of the bounding box's side length.\n    * @return {Promise} a Promise that fulfills with an array of all the\n    *    retrieved locations\n    */\n    getRouteOrdersInArea = async (area) => {\n        // calculate the SW and NE corners of the bounding box to query for\n        const box = utils.boundingBoxCoordinates(area.center, area.radius);\n\n        // construct the GeoPoints\n        const lesserGeopoint = new firebase.firestore.GeoPoint(box.swCorner.latitude, box.swCorner.longitude);\n        const greaterGeopoint = new firebase.firestore.GeoPoint(box.neCorner.latitude, box.neCorner.longitude);\n\n        // construct the Firestore query\n        let query = firebase.firestore().collection('routeorders')\n            .where('start_location', '>', lesserGeopoint)\n            .where('start_location', '<', greaterGeopoint)\n            .orderBy(\"timestamp\");\n\n        // return a Promise that fulfills with the locations\n        try {\n            const snapshot = await query.get();\n            const allLocs = []; // used to hold all the loc data\n            snapshot.forEach((loc) => {\n                // get the data\n                const data = loc.data();\n                // calculate a distance from the center\n                data.distanceFromCenter = utils.distance(area.center, data.location);\n                // add to the array\n                allLocs.push(data);\n            });\n            return allLocs;\n        } catch (err) {\n            console.error(err);\n            return new Error('Error while retrieving events');\n        };\n    }\n\n    componentWillMount = async () => {\n        const routesList = await this.getRouteOrders();\n        this.setState({\n            routesList: routesList\n        });\n    }\n\n    getRouteOrders = async () => {\n        let query = firebase.firestore().collection('routeorders')\n            .orderBy(\"timestamp\");\n\n        try {\n            const snapshot = await query.get();\n            const allLocs = []; // used to hold all the loc data\n            snapshot.forEach((loc) => {\n                const data = loc.data();\n                data.id = loc.id;\n                allLocs.push(data);\n            });\n            return allLocs;\n        } catch (err) {\n            console.error(err);\n            return new Error('Error while retrieving events');\n        };\n    }\n\n\n    componentWillMount() {\n    }\n\n    componentWillUnmount() {\n    }\n\n    render() {\n        console.log(this.state.routesList);\n        return (\n            <Page className=\"RoutesOffersOverview\" renderToolbar={() => <ToolbarNormal name=\"Route lijst\" />}>\n                <h2 style={{ margin: 10 }}>Laatste routes</h2>\n                <Card style={{ padding: 0}}>\n                    <List>\n                        <RoutesList routesList={this.state.routesList || []} />\n                    </List>\n                </Card>\n            </Page>\n        );\n    }\n}\n\nexport default RoutesOffersOverview;\n"],"sourceRoot":""}